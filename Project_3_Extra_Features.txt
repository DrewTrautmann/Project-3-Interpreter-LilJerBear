Advanced Features
=================

Nested Loops and Conditionals
-----------------------------
Modify the if and while statements to support arbitrary levels of
nesting.

For example, the code

    a := 1
    count := 0
    
    while a < 3:
        b := 1
    
        while b < 3:
            count := count + 1
            b := b + 1
        endwhile
    
        a := a + 1
    endwhile
    
    print count

should print 9, because count is incremented 9 times in total by the
nested loops.

Note that this requires being able to skip over the entire body of
the outer loop or conditional statement, which may requires skipping
over multiple endwhile and endif tokens until you reach the one that
matches the outer level.


Fancier Printing
----------------
Modify the print statement to support two additional features:

    - Printing literal strings
    - Printing a list of items separated by commas
    
For example,

    print "a = ", a, "b = ", b
    
Literal strings are enclosed in double quotes. To implement this
feature, you'll need to modify the Lexer to recognize string literals
and return a STRING token with the literal as its value.

The items in the comma-separated list may be either string literals
or expressions.

Note that the only values for variables and expressions are still
integers, so you do not need to worry about assigning a string
to a variable or any other operations on strings.


For
---
A for loop has the form,

    'for' Name ':=' Expr 'to' Expr ':' StatementBlock 'endfor'

The two expressions define the starting and ending values of the loop
and the variable name is the loop index counter.

For example,

    for i := 1 to 5:
        print i
    endfor
    
will print the values from 1 to 5 (inclusive).

    for index := a to b:
        { Loop body goes here }
    endfor

will loop from the value of a up to the value of b.

The loop index variable may have any name: it doesn't have to be i
or a single letter.

The loop only counts up by ones; you don't need to implement any
other changes to the loop counter.

Make sure that you support nested for loops.
    
    
Else
----
Modify the if statement to support an optional else branch. For
example,

    a := -10
    if a > 0:
        print a
    else:
        print -a
    endif

The behavior should be what you expect: if the condition evaluates
to false, skip the if statement body and exceute the StatementBlock
following else.
    
The else branch may have additional if-else statements nested within
it.


Subroutines
-----------
There are three features you need to add to implement subroutines:

    - subroutine declarations using the sub keyword
    - the call statement
    - returning from a subroutine
    
Here's an example of a complete program using subroutines:
    
    program SquareTest:
        { Square a number }
        sub square:
            sq := arg * arg
            return
        endsub
    
        { Main }
        arg := 10
        call square
        print sq  { Prints 100 }
    end

Our subroutines have no input arguments, no return values, and no
local variables. All variables in our programs are treated as
globals. 
    
A subroutine has the form

    sub Name:
        StatementBlock
    endsub
    
On encountering the sub keyword, the interpreter does not execute
its code immediately. Instead, it enters the program counter index
for the start of the subroutine body into the symbol table, linked
with the name of the subroutine:

    this.symbols.put(subroutine name, subroutine start index)
    
The interpreter should skip the rest of the subroutine's body until
it reaches the matching endsub token.
    
The call command causes the program to jump up and execute a
previously defined subroutine.

To implement this, you can look up the pc location associated with
the subroutine name in the symbol table, then modify the program
counter to jump to that location and begin executing a
StatementBlock. However, you also need to save the return
location, so that the program can return to where it left off when
the subroutine ends.

Subroutines can all other subroutines, so you'll want to use a call
stack to save the history of subroutine return locations.

On encountering the return command, pop the top return location off
the call stack and branch to it, to resume executing the next program
statement after the last subroutine call.


Complete Grammar
----------------
Program --> 'program' Name ':' StatementBlock 'end'

StatementBlock --> Statement {'\n' Statement}

Statement --> Name ':=' Expr
              | 'print' (String | Expr) {',' (String | Expr)}
              | 'input' Name
              | 'if' Cond ':' StatementBlock ['else' ':' StatementBlock] 'endif'
              | 'while' Cond ':' StatementBlock 'endwhile'
              | 'for' Name ':=' Expr 'to' Expr ':' StatementBlock 'endfor'
              | 'sub' Name ':' StatementBlock 'endsub'
              | 'call' Name
              | 'return'
              | empty
              
String --> any sequence of characters enclosed in double quotes, " "            
              
Cond --> Expr [RelOp Expr]

RelOp --> '<' | '>' | '<=' | '>=' | '=' | '<>'

Expr --> Term {('+' | '-') Term}

Term --> UnaryTerm {('*' | '/') UnaryTerm}

UnaryTerm --> '-' Factor | Factor

Factor --> Number | Name | '(' Expr ')'
