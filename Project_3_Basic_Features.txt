Basic Features
==============

Language Grammar
----------------
Program --> 'program' Name ':' StatementBlock 'end'

StatementBlock --> Statement {'\n' Statement}

Statement --> Name ':=' Expr |
              'print' Expr |
              'input' Name |
              'if' Cond ':' StatementBlock 'endif' |
              'while' Cond ':' StatementBlock 'endwhile'
              
Cond --> Expr [RelOp Expr]

RelOp --> '<' | '>' | '<=' | '>=' | '=' | '<>'

Expr --> Term {('+' | '-') Term}

Term --> UnaryTerm {('*' | '/') UnaryTerm}

UnaryTerm --> '-' Factor | Factor

Factor --> Number | '(' Expr ')'

Basic Program Form
------------------
Every program has the following basic form:

    program Name:
        StatementBlock
    end
      
Here, "program", and "end" are keywords marking the beginning and
ending of the program and Name is an identifier.

The StatementBlock is a series of Statements, separated by newlines:

    StatementBlock ---> Statement {'\n' Statement}
    
There are six basic Statements:

    1. assignment
    2. print  
    3. input
    4. if conditional
    5. while loop
    6. a blank line is treated as an empty statement


Assignments
-----------
Assignment statements have the form

    Name ':=' Expr
    
For example,

    var := 100
    temp := (var * 2)

Each assignment updates the value of its left-hand variable in the
symbol table to the value of its right-hand side expression. If the
variable does not exist, create a new entry for it in the symbol
table.

    
Printing
--------
The print command has the form

    print Expr
    
For example,

    print a
    print 1024 / 32
    
Output the result of the expression to the console using
System.out.println. You don't need to apply any formatting to the
output.

Your program should not produce any output other than results of
print statements and the messages of any Exceptions generated by
errors.

    
Input
-----
The input command has the form

    input Name
    
When the command executes, it should print a prompt asking the user
to input a value for the named variable, then assign the given value
to that variable.

For example, the command

    input temp
    
Should produce the following prompt:

    Enter a value for temp: 
    
Whatever the user enters is stored as the new value of temp in the 
symbol table.

You can use a Scanner to read from System.in. Throw an error if the
user does not enter an integer.


If
--
The conditional statement has the form:

    if Condition :
       StatementBlock
    endif
    
For example,

    if a < 10:
        print a
        a := 10
    endif

If the condition evaluates to anything nonzero, the StatementBlock
inside the body of the if statement is executed.

If the condition evaluates to zero, the StatementBlock is skipped
down to the matching endif token.

You will need to implement a loop that can skip all tokens in the
program until it encounters an endif.

You DO NOT need to support nested if statements as part of the basic
functionality.


While
-----
The while loop has the form:

    while Condition:
        StatementBlock
    endwhile
    
For example,

    while a < 10:
        print a
        a := a + 1
    endwhile
    
The condition is handled in the same way as the if statement: zero
is treated as false, anything nonzero is treated as true.

You will need a way to execute the StatementBlock that makes up the
body of the loop, then "branch" back to the top to test the condition
again.

Here's a tip: you can branch to any part of the program by changing
the program counter value (this.pc) and then reading tokens beginning
at that location. So, save the PC value before the loop body, then
branch back up to the top to test the condition again after the body
executes.

As with the if statement, you need a way to jump around the body
of the loop in the case where the condition evaluates to false.

You DO NOT need to implement nested loops as a basic function of your
program.